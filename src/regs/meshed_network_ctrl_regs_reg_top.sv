// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module meshed_network_ctrl_regs_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 6
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output meshed_network_ctrl_regs_reg_pkg::meshed_network_ctrl_regs_reg2hw_t reg2hw, // Write
  input  meshed_network_ctrl_regs_reg_pkg::meshed_network_ctrl_regs_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import meshed_network_ctrl_regs_reg_pkg::* ;

  localparam int DW = 64;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [BlockAw-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [3:0] meshed_network_id_xy_id_qs;
  logic [3:0] meshed_network_id_xy_id_wd;
  logic meshed_network_id_xy_id_we;
  logic [3:0] meshed_network_id_ring_id_qs;
  logic [3:0] meshed_network_id_ring_id_wd;
  logic meshed_network_id_ring_id_we;
  logic [1:0] meshed_network_id_ring_up_port_qs;
  logic [1:0] meshed_network_id_ring_up_port_wd;
  logic meshed_network_id_ring_up_port_we;
  logic [1:0] meshed_network_id_ring_down_port_qs;
  logic [1:0] meshed_network_id_ring_down_port_wd;
  logic meshed_network_id_ring_down_port_we;
  logic [31:0] meshed_network_data_fetcher_data_fetcher_start_addr_qs;
  logic [31:0] meshed_network_data_fetcher_data_fetcher_start_addr_wd;
  logic meshed_network_data_fetcher_data_fetcher_start_addr_we;
  logic [31:0] meshed_network_data_fetcher_data_fetcher_len_qs;
  logic [31:0] meshed_network_data_fetcher_data_fetcher_len_wd;
  logic meshed_network_data_fetcher_data_fetcher_len_we;
  logic meshed_network_rom_ctrl_rom_en_qs;
  logic meshed_network_rom_ctrl_rom_en_wd;
  logic meshed_network_rom_ctrl_rom_en_we;
  logic meshed_network_rom_ctrl_traffic_dir_qs;
  logic meshed_network_rom_ctrl_traffic_dir_wd;
  logic meshed_network_rom_ctrl_traffic_dir_we;
  logic [15:0] meshed_network_rom_ctrl_dst_mask_qs;
  logic [15:0] meshed_network_rom_ctrl_dst_mask_wd;
  logic meshed_network_rom_ctrl_dst_mask_we;
  logic [31:0] meshed_network_data_recv_data_recv_addr_qs;
  logic [31:0] meshed_network_data_recv_data_recv_addr_wd;
  logic meshed_network_data_recv_data_recv_addr_we;
  logic [31:0] meshed_network_data_recv_data_recv_len_qs;
  logic [31:0] meshed_network_data_recv_data_recv_len_wd;
  logic meshed_network_data_recv_data_recv_len_we;
  logic meshed_network_ctrl_send_start_qs;
  logic meshed_network_ctrl_send_start_wd;
  logic meshed_network_ctrl_send_start_we;
  logic [3:0] meshed_network_ctrl_dst_chip_qs;
  logic [3:0] meshed_network_ctrl_dst_chip_wd;
  logic meshed_network_ctrl_dst_chip_we;
  logic meshed_network_ctrl_recv_rdy_qs;
  logic meshed_network_ctrl_recv_rdy_wd;
  logic meshed_network_ctrl_recv_rdy_we;
  logic meshed_network_ctrl_reset_writer_qs;
  logic meshed_network_ctrl_reset_writer_wd;
  logic meshed_network_ctrl_reset_writer_we;
  logic meshed_network_status_send_rdy_qs;
  logic meshed_network_status_send_done_qs;
  logic [3:0] meshed_network_status_recv_src_id_qs;
  logic meshed_network_status_recv_done_qs;
  logic meshed_network_status_recv_overflow_qs;
  logic meshed_network_status_data_requester_state_qs;
  logic meshed_network_status_data_feeder_state_qs;
  logic [1:0] meshed_network_status_data_writer_state_qs;

  // Register instances
  // R[meshed_network_id]: V(False)

  //   F[xy_id]: 3:0
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_meshed_network_id_xy_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (meshed_network_id_xy_id_we),
    .wd     (meshed_network_id_xy_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.meshed_network_id.xy_id.q ),

    // to register interface (read)
    .qs     (meshed_network_id_xy_id_qs)
  );


  //   F[ring_id]: 7:4
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_meshed_network_id_ring_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (meshed_network_id_ring_id_we),
    .wd     (meshed_network_id_ring_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.meshed_network_id.ring_id.q ),

    // to register interface (read)
    .qs     (meshed_network_id_ring_id_qs)
  );


  //   F[ring_up_port]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_meshed_network_id_ring_up_port (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (meshed_network_id_ring_up_port_we),
    .wd     (meshed_network_id_ring_up_port_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.meshed_network_id.ring_up_port.q ),

    // to register interface (read)
    .qs     (meshed_network_id_ring_up_port_qs)
  );


  //   F[ring_down_port]: 11:10
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_meshed_network_id_ring_down_port (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (meshed_network_id_ring_down_port_we),
    .wd     (meshed_network_id_ring_down_port_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.meshed_network_id.ring_down_port.q ),

    // to register interface (read)
    .qs     (meshed_network_id_ring_down_port_qs)
  );


  // R[meshed_network_data_fetcher_data]: V(False)

  //   F[fetcher_start_addr]: 31:0
  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_meshed_network_data_fetcher_data_fetcher_start_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (meshed_network_data_fetcher_data_fetcher_start_addr_we),
    .wd     (meshed_network_data_fetcher_data_fetcher_start_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.meshed_network_data_fetcher_data.fetcher_start_addr.q ),

    // to register interface (read)
    .qs     (meshed_network_data_fetcher_data_fetcher_start_addr_qs)
  );


  //   F[fetcher_len]: 63:32
  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_meshed_network_data_fetcher_data_fetcher_len (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (meshed_network_data_fetcher_data_fetcher_len_we),
    .wd     (meshed_network_data_fetcher_data_fetcher_len_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.meshed_network_data_fetcher_data.fetcher_len.q ),

    // to register interface (read)
    .qs     (meshed_network_data_fetcher_data_fetcher_len_qs)
  );


  // R[meshed_network_rom_ctrl]: V(False)

  //   F[rom_en]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_meshed_network_rom_ctrl_rom_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (meshed_network_rom_ctrl_rom_en_we),
    .wd     (meshed_network_rom_ctrl_rom_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.meshed_network_rom_ctrl.rom_en.q ),

    // to register interface (read)
    .qs     (meshed_network_rom_ctrl_rom_en_qs)
  );


  //   F[traffic_dir]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_meshed_network_rom_ctrl_traffic_dir (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (meshed_network_rom_ctrl_traffic_dir_we),
    .wd     (meshed_network_rom_ctrl_traffic_dir_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.meshed_network_rom_ctrl.traffic_dir.q ),

    // to register interface (read)
    .qs     (meshed_network_rom_ctrl_traffic_dir_qs)
  );


  //   F[dst_mask]: 17:2
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_meshed_network_rom_ctrl_dst_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (meshed_network_rom_ctrl_dst_mask_we),
    .wd     (meshed_network_rom_ctrl_dst_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.meshed_network_rom_ctrl.dst_mask.q ),

    // to register interface (read)
    .qs     (meshed_network_rom_ctrl_dst_mask_qs)
  );


  // R[meshed_network_data_recv_data]: V(False)

  //   F[recv_addr]: 31:0
  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_meshed_network_data_recv_data_recv_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (meshed_network_data_recv_data_recv_addr_we),
    .wd     (meshed_network_data_recv_data_recv_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.meshed_network_data_recv_data.recv_addr.q ),

    // to register interface (read)
    .qs     (meshed_network_data_recv_data_recv_addr_qs)
  );


  //   F[recv_len]: 63:32
  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_meshed_network_data_recv_data_recv_len (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (meshed_network_data_recv_data_recv_len_we),
    .wd     (meshed_network_data_recv_data_recv_len_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.meshed_network_data_recv_data.recv_len.q ),

    // to register interface (read)
    .qs     (meshed_network_data_recv_data_recv_len_qs)
  );


  // R[meshed_network_ctrl]: V(False)

  //   F[send_start]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_meshed_network_ctrl_send_start (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (meshed_network_ctrl_send_start_we),
    .wd     (meshed_network_ctrl_send_start_wd),

    // from internal hardware
    .de     (hw2reg.meshed_network_ctrl.send_start.de),
    .d      (hw2reg.meshed_network_ctrl.send_start.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.meshed_network_ctrl.send_start.q ),

    // to register interface (read)
    .qs     (meshed_network_ctrl_send_start_qs)
  );


  //   F[dst_chip]: 4:1
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_meshed_network_ctrl_dst_chip (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (meshed_network_ctrl_dst_chip_we),
    .wd     (meshed_network_ctrl_dst_chip_wd),

    // from internal hardware
    .de     (hw2reg.meshed_network_ctrl.dst_chip.de),
    .d      (hw2reg.meshed_network_ctrl.dst_chip.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.meshed_network_ctrl.dst_chip.q ),

    // to register interface (read)
    .qs     (meshed_network_ctrl_dst_chip_qs)
  );


  //   F[recv_rdy]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_meshed_network_ctrl_recv_rdy (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (meshed_network_ctrl_recv_rdy_we),
    .wd     (meshed_network_ctrl_recv_rdy_wd),

    // from internal hardware
    .de     (hw2reg.meshed_network_ctrl.recv_rdy.de),
    .d      (hw2reg.meshed_network_ctrl.recv_rdy.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.meshed_network_ctrl.recv_rdy.q ),

    // to register interface (read)
    .qs     (meshed_network_ctrl_recv_rdy_qs)
  );


  //   F[reset_writer]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_meshed_network_ctrl_reset_writer (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (meshed_network_ctrl_reset_writer_we),
    .wd     (meshed_network_ctrl_reset_writer_wd),

    // from internal hardware
    .de     (hw2reg.meshed_network_ctrl.reset_writer.de),
    .d      (hw2reg.meshed_network_ctrl.reset_writer.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.meshed_network_ctrl.reset_writer.q ),

    // to register interface (read)
    .qs     (meshed_network_ctrl_reset_writer_qs)
  );


  // R[meshed_network_status]: V(False)

  //   F[send_rdy]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_meshed_network_status_send_rdy (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.meshed_network_status.send_rdy.de),
    .d      (hw2reg.meshed_network_status.send_rdy.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.meshed_network_status.send_rdy.q ),

    // to register interface (read)
    .qs     (meshed_network_status_send_rdy_qs)
  );


  //   F[send_done]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_meshed_network_status_send_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.meshed_network_status.send_done.de),
    .d      (hw2reg.meshed_network_status.send_done.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.meshed_network_status.send_done.q ),

    // to register interface (read)
    .qs     (meshed_network_status_send_done_qs)
  );


  //   F[recv_src_id]: 5:2
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RO"),
    .RESVAL  (4'h0)
  ) u_meshed_network_status_recv_src_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.meshed_network_status.recv_src_id.de),
    .d      (hw2reg.meshed_network_status.recv_src_id.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.meshed_network_status.recv_src_id.q ),

    // to register interface (read)
    .qs     (meshed_network_status_recv_src_id_qs)
  );


  //   F[recv_done]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_meshed_network_status_recv_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.meshed_network_status.recv_done.de),
    .d      (hw2reg.meshed_network_status.recv_done.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.meshed_network_status.recv_done.q ),

    // to register interface (read)
    .qs     (meshed_network_status_recv_done_qs)
  );


  //   F[recv_overflow]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_meshed_network_status_recv_overflow (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.meshed_network_status.recv_overflow.de),
    .d      (hw2reg.meshed_network_status.recv_overflow.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.meshed_network_status.recv_overflow.q ),

    // to register interface (read)
    .qs     (meshed_network_status_recv_overflow_qs)
  );


  //   F[data_requester_state]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_meshed_network_status_data_requester_state (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.meshed_network_status.data_requester_state.de),
    .d      (hw2reg.meshed_network_status.data_requester_state.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.meshed_network_status.data_requester_state.q ),

    // to register interface (read)
    .qs     (meshed_network_status_data_requester_state_qs)
  );


  //   F[data_feeder_state]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_meshed_network_status_data_feeder_state (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.meshed_network_status.data_feeder_state.de),
    .d      (hw2reg.meshed_network_status.data_feeder_state.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.meshed_network_status.data_feeder_state.q ),

    // to register interface (read)
    .qs     (meshed_network_status_data_feeder_state_qs)
  );


  //   F[data_writer_state]: 11:10
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RO"),
    .RESVAL  (2'h0)
  ) u_meshed_network_status_data_writer_state (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.meshed_network_status.data_writer_state.de),
    .d      (hw2reg.meshed_network_status.data_writer_state.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.meshed_network_status.data_writer_state.q ),

    // to register interface (read)
    .qs     (meshed_network_status_data_writer_state_qs)
  );




  logic [5:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == MESHED_NETWORK_CTRL_REGS_MESHED_NETWORK_ID_OFFSET);
    addr_hit[1] = (reg_addr == MESHED_NETWORK_CTRL_REGS_MESHED_NETWORK_DATA_FETCHER_DATA_OFFSET);
    addr_hit[2] = (reg_addr == MESHED_NETWORK_CTRL_REGS_MESHED_NETWORK_ROM_CTRL_OFFSET);
    addr_hit[3] = (reg_addr == MESHED_NETWORK_CTRL_REGS_MESHED_NETWORK_DATA_RECV_DATA_OFFSET);
    addr_hit[4] = (reg_addr == MESHED_NETWORK_CTRL_REGS_MESHED_NETWORK_CTRL_OFFSET);
    addr_hit[5] = (reg_addr == MESHED_NETWORK_CTRL_REGS_MESHED_NETWORK_STATUS_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(MESHED_NETWORK_CTRL_REGS_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(MESHED_NETWORK_CTRL_REGS_PERMIT[1] & ~reg_be))) |
               (addr_hit[2] & (|(MESHED_NETWORK_CTRL_REGS_PERMIT[2] & ~reg_be))) |
               (addr_hit[3] & (|(MESHED_NETWORK_CTRL_REGS_PERMIT[3] & ~reg_be))) |
               (addr_hit[4] & (|(MESHED_NETWORK_CTRL_REGS_PERMIT[4] & ~reg_be))) |
               (addr_hit[5] & (|(MESHED_NETWORK_CTRL_REGS_PERMIT[5] & ~reg_be)))));
  end

  assign meshed_network_id_xy_id_we = addr_hit[0] & reg_we & !reg_error;
  assign meshed_network_id_xy_id_wd = reg_wdata[3:0];

  assign meshed_network_id_ring_id_we = addr_hit[0] & reg_we & !reg_error;
  assign meshed_network_id_ring_id_wd = reg_wdata[7:4];

  assign meshed_network_id_ring_up_port_we = addr_hit[0] & reg_we & !reg_error;
  assign meshed_network_id_ring_up_port_wd = reg_wdata[9:8];

  assign meshed_network_id_ring_down_port_we = addr_hit[0] & reg_we & !reg_error;
  assign meshed_network_id_ring_down_port_wd = reg_wdata[11:10];

  assign meshed_network_data_fetcher_data_fetcher_start_addr_we = addr_hit[1] & reg_we & !reg_error;
  assign meshed_network_data_fetcher_data_fetcher_start_addr_wd = reg_wdata[31:0];

  assign meshed_network_data_fetcher_data_fetcher_len_we = addr_hit[1] & reg_we & !reg_error;
  assign meshed_network_data_fetcher_data_fetcher_len_wd = reg_wdata[63:32];

  assign meshed_network_rom_ctrl_rom_en_we = addr_hit[2] & reg_we & !reg_error;
  assign meshed_network_rom_ctrl_rom_en_wd = reg_wdata[0];

  assign meshed_network_rom_ctrl_traffic_dir_we = addr_hit[2] & reg_we & !reg_error;
  assign meshed_network_rom_ctrl_traffic_dir_wd = reg_wdata[1];

  assign meshed_network_rom_ctrl_dst_mask_we = addr_hit[2] & reg_we & !reg_error;
  assign meshed_network_rom_ctrl_dst_mask_wd = reg_wdata[17:2];

  assign meshed_network_data_recv_data_recv_addr_we = addr_hit[3] & reg_we & !reg_error;
  assign meshed_network_data_recv_data_recv_addr_wd = reg_wdata[31:0];

  assign meshed_network_data_recv_data_recv_len_we = addr_hit[3] & reg_we & !reg_error;
  assign meshed_network_data_recv_data_recv_len_wd = reg_wdata[63:32];

  assign meshed_network_ctrl_send_start_we = addr_hit[4] & reg_we & !reg_error;
  assign meshed_network_ctrl_send_start_wd = reg_wdata[0];

  assign meshed_network_ctrl_dst_chip_we = addr_hit[4] & reg_we & !reg_error;
  assign meshed_network_ctrl_dst_chip_wd = reg_wdata[4:1];

  assign meshed_network_ctrl_recv_rdy_we = addr_hit[4] & reg_we & !reg_error;
  assign meshed_network_ctrl_recv_rdy_wd = reg_wdata[5];

  assign meshed_network_ctrl_reset_writer_we = addr_hit[4] & reg_we & !reg_error;
  assign meshed_network_ctrl_reset_writer_wd = reg_wdata[6];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[3:0] = meshed_network_id_xy_id_qs;
        reg_rdata_next[7:4] = meshed_network_id_ring_id_qs;
        reg_rdata_next[9:8] = meshed_network_id_ring_up_port_qs;
        reg_rdata_next[11:10] = meshed_network_id_ring_down_port_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = meshed_network_data_fetcher_data_fetcher_start_addr_qs;
        reg_rdata_next[63:32] = meshed_network_data_fetcher_data_fetcher_len_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = meshed_network_rom_ctrl_rom_en_qs;
        reg_rdata_next[1] = meshed_network_rom_ctrl_traffic_dir_qs;
        reg_rdata_next[17:2] = meshed_network_rom_ctrl_dst_mask_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = meshed_network_data_recv_data_recv_addr_qs;
        reg_rdata_next[63:32] = meshed_network_data_recv_data_recv_len_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = meshed_network_ctrl_send_start_qs;
        reg_rdata_next[4:1] = meshed_network_ctrl_dst_chip_qs;
        reg_rdata_next[5] = meshed_network_ctrl_recv_rdy_qs;
        reg_rdata_next[6] = meshed_network_ctrl_reset_writer_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = meshed_network_status_send_rdy_qs;
        reg_rdata_next[1] = meshed_network_status_send_done_qs;
        reg_rdata_next[5:2] = meshed_network_status_recv_src_id_qs;
        reg_rdata_next[6] = meshed_network_status_recv_done_qs;
        reg_rdata_next[7] = meshed_network_status_recv_overflow_qs;
        reg_rdata_next[8] = meshed_network_status_data_requester_state_qs;
        reg_rdata_next[9] = meshed_network_status_data_feeder_state_qs;
        reg_rdata_next[11:10] = meshed_network_status_data_writer_state_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module meshed_network_ctrl_regs_reg_top_intf
#(
  parameter int AW = 6,
  localparam int DW = 64
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output meshed_network_ctrl_regs_reg_pkg::meshed_network_ctrl_regs_reg2hw_t reg2hw, // Write
  input  meshed_network_ctrl_regs_reg_pkg::meshed_network_ctrl_regs_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  meshed_network_ctrl_regs_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


