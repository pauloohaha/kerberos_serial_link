// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package meshed_network_ctrl_regs_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 6;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic [3:0]  q;
    } xy_id;
    struct packed {
      logic [3:0]  q;
    } ring_id;
    struct packed {
      logic [1:0]  q;
    } ring_up_port;
    struct packed {
      logic [1:0]  q;
    } ring_down_port;
  } meshed_network_ctrl_regs_reg2hw_meshed_network_id_reg_t;

  typedef struct packed {
    struct packed {
      logic [31:0] q;
    } fetcher_start_addr;
    struct packed {
      logic [31:0] q;
    } fetcher_len;
  } meshed_network_ctrl_regs_reg2hw_meshed_network_data_fetcher_data_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } rom_en;
    struct packed {
      logic        q;
    } traffic_dir;
    struct packed {
      logic [15:0] q;
    } dst_mask;
  } meshed_network_ctrl_regs_reg2hw_meshed_network_rom_ctrl_reg_t;

  typedef struct packed {
    struct packed {
      logic [31:0] q;
    } recv_addr;
    struct packed {
      logic [31:0] q;
    } recv_len;
  } meshed_network_ctrl_regs_reg2hw_meshed_network_data_recv_data_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } send_start;
    struct packed {
      logic [3:0]  q;
    } dst_chip;
    struct packed {
      logic        q;
    } recv_rdy;
    struct packed {
      logic        q;
    } reset_writer;
  } meshed_network_ctrl_regs_reg2hw_meshed_network_ctrl_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } send_rdy;
    struct packed {
      logic        q;
    } send_done;
    struct packed {
      logic [3:0]  q;
    } recv_src_id;
    struct packed {
      logic        q;
    } recv_done;
    struct packed {
      logic        q;
    } recv_overflow;
    struct packed {
      logic        q;
    } data_requester_state;
    struct packed {
      logic        q;
    } data_feeder_state;
    struct packed {
      logic [1:0]  q;
    } data_writer_state;
  } meshed_network_ctrl_regs_reg2hw_meshed_network_status_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } send_start;
    struct packed {
      logic [3:0]  d;
      logic        de;
    } dst_chip;
    struct packed {
      logic        d;
      logic        de;
    } recv_rdy;
    struct packed {
      logic        d;
      logic        de;
    } reset_writer;
  } meshed_network_ctrl_regs_hw2reg_meshed_network_ctrl_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } send_rdy;
    struct packed {
      logic        d;
      logic        de;
    } send_done;
    struct packed {
      logic [3:0]  d;
      logic        de;
    } recv_src_id;
    struct packed {
      logic        d;
      logic        de;
    } recv_done;
    struct packed {
      logic        d;
      logic        de;
    } recv_overflow;
    struct packed {
      logic        d;
      logic        de;
    } data_requester_state;
    struct packed {
      logic        d;
      logic        de;
    } data_feeder_state;
    struct packed {
      logic [1:0]  d;
      logic        de;
    } data_writer_state;
  } meshed_network_ctrl_regs_hw2reg_meshed_network_status_reg_t;

  // Register -> HW type
  typedef struct packed {
    meshed_network_ctrl_regs_reg2hw_meshed_network_id_reg_t meshed_network_id; // [176:165]
    meshed_network_ctrl_regs_reg2hw_meshed_network_data_fetcher_data_reg_t meshed_network_data_fetcher_data; // [164:101]
    meshed_network_ctrl_regs_reg2hw_meshed_network_rom_ctrl_reg_t meshed_network_rom_ctrl; // [100:83]
    meshed_network_ctrl_regs_reg2hw_meshed_network_data_recv_data_reg_t meshed_network_data_recv_data; // [82:19]
    meshed_network_ctrl_regs_reg2hw_meshed_network_ctrl_reg_t meshed_network_ctrl; // [18:12]
    meshed_network_ctrl_regs_reg2hw_meshed_network_status_reg_t meshed_network_status; // [11:0]
  } meshed_network_ctrl_regs_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    meshed_network_ctrl_regs_hw2reg_meshed_network_ctrl_reg_t meshed_network_ctrl; // [30:20]
    meshed_network_ctrl_regs_hw2reg_meshed_network_status_reg_t meshed_network_status; // [19:0]
  } meshed_network_ctrl_regs_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] MESHED_NETWORK_CTRL_REGS_MESHED_NETWORK_ID_OFFSET = 6'h 0;
  parameter logic [BlockAw-1:0] MESHED_NETWORK_CTRL_REGS_MESHED_NETWORK_DATA_FETCHER_DATA_OFFSET = 6'h 8;
  parameter logic [BlockAw-1:0] MESHED_NETWORK_CTRL_REGS_MESHED_NETWORK_ROM_CTRL_OFFSET = 6'h 10;
  parameter logic [BlockAw-1:0] MESHED_NETWORK_CTRL_REGS_MESHED_NETWORK_DATA_RECV_DATA_OFFSET = 6'h 18;
  parameter logic [BlockAw-1:0] MESHED_NETWORK_CTRL_REGS_MESHED_NETWORK_CTRL_OFFSET = 6'h 20;
  parameter logic [BlockAw-1:0] MESHED_NETWORK_CTRL_REGS_MESHED_NETWORK_STATUS_OFFSET = 6'h 28;

  // Register index
  typedef enum int {
    MESHED_NETWORK_CTRL_REGS_MESHED_NETWORK_ID,
    MESHED_NETWORK_CTRL_REGS_MESHED_NETWORK_DATA_FETCHER_DATA,
    MESHED_NETWORK_CTRL_REGS_MESHED_NETWORK_ROM_CTRL,
    MESHED_NETWORK_CTRL_REGS_MESHED_NETWORK_DATA_RECV_DATA,
    MESHED_NETWORK_CTRL_REGS_MESHED_NETWORK_CTRL,
    MESHED_NETWORK_CTRL_REGS_MESHED_NETWORK_STATUS
  } meshed_network_ctrl_regs_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] MESHED_NETWORK_CTRL_REGS_PERMIT [6] = '{
    4'b 0011, // index[0] MESHED_NETWORK_CTRL_REGS_MESHED_NETWORK_ID
    4'b 1111, // index[1] MESHED_NETWORK_CTRL_REGS_MESHED_NETWORK_DATA_FETCHER_DATA
    4'b 0111, // index[2] MESHED_NETWORK_CTRL_REGS_MESHED_NETWORK_ROM_CTRL
    4'b 1111, // index[3] MESHED_NETWORK_CTRL_REGS_MESHED_NETWORK_DATA_RECV_DATA
    4'b 0001, // index[4] MESHED_NETWORK_CTRL_REGS_MESHED_NETWORK_CTRL
    4'b 0011  // index[5] MESHED_NETWORK_CTRL_REGS_MESHED_NETWORK_STATUS
  };

endpackage

