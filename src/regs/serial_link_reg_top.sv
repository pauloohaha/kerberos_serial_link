// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module serial_link_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 8
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output serial_link_reg_pkg::serial_link_reg2hw_t reg2hw, // Write
  input  serial_link_reg_pkg::serial_link_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import serial_link_reg_pkg::* ;

  localparam int DW = 64;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [BlockAw-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic ctrl_clk_ena_qs;
  logic ctrl_clk_ena_wd;
  logic ctrl_clk_ena_we;
  logic ctrl_reset_n_qs;
  logic ctrl_reset_n_wd;
  logic ctrl_reset_n_we;
  logic ctrl_axi_in_isolate_qs;
  logic ctrl_axi_in_isolate_wd;
  logic ctrl_axi_in_isolate_we;
  logic ctrl_axi_out_isolate_qs;
  logic ctrl_axi_out_isolate_wd;
  logic ctrl_axi_out_isolate_we;
  logic isolated_axi_in_qs;
  logic isolated_axi_in_re;
  logic isolated_axi_out_qs;
  logic isolated_axi_out_re;
  logic [10:0] tx_phy_clk_div_0_qs;
  logic [10:0] tx_phy_clk_div_0_wd;
  logic tx_phy_clk_div_0_we;
  logic [10:0] tx_phy_clk_div_1_qs;
  logic [10:0] tx_phy_clk_div_1_wd;
  logic tx_phy_clk_div_1_we;
  logic [10:0] tx_phy_clk_div_2_qs;
  logic [10:0] tx_phy_clk_div_2_wd;
  logic tx_phy_clk_div_2_we;
  logic [10:0] tx_phy_clk_div_3_qs;
  logic [10:0] tx_phy_clk_div_3_wd;
  logic tx_phy_clk_div_3_we;
  logic [10:0] tx_phy_clk_div_4_qs;
  logic [10:0] tx_phy_clk_div_4_wd;
  logic tx_phy_clk_div_4_we;
  logic [10:0] tx_phy_clk_start_0_qs;
  logic [10:0] tx_phy_clk_start_0_wd;
  logic tx_phy_clk_start_0_we;
  logic [10:0] tx_phy_clk_start_1_qs;
  logic [10:0] tx_phy_clk_start_1_wd;
  logic tx_phy_clk_start_1_we;
  logic [10:0] tx_phy_clk_start_2_qs;
  logic [10:0] tx_phy_clk_start_2_wd;
  logic tx_phy_clk_start_2_we;
  logic [10:0] tx_phy_clk_start_3_qs;
  logic [10:0] tx_phy_clk_start_3_wd;
  logic tx_phy_clk_start_3_we;
  logic [10:0] tx_phy_clk_start_4_qs;
  logic [10:0] tx_phy_clk_start_4_wd;
  logic tx_phy_clk_start_4_we;
  logic [10:0] tx_phy_clk_end_0_qs;
  logic [10:0] tx_phy_clk_end_0_wd;
  logic tx_phy_clk_end_0_we;
  logic [10:0] tx_phy_clk_end_1_qs;
  logic [10:0] tx_phy_clk_end_1_wd;
  logic tx_phy_clk_end_1_we;
  logic [10:0] tx_phy_clk_end_2_qs;
  logic [10:0] tx_phy_clk_end_2_wd;
  logic tx_phy_clk_end_2_we;
  logic [10:0] tx_phy_clk_end_3_qs;
  logic [10:0] tx_phy_clk_end_3_wd;
  logic tx_phy_clk_end_3_we;
  logic [10:0] tx_phy_clk_end_4_qs;
  logic [10:0] tx_phy_clk_end_4_wd;
  logic tx_phy_clk_end_4_we;
  logic raw_mode_en_wd;
  logic raw_mode_en_we;
  logic [2:0] raw_mode_in_ch_sel_wd;
  logic raw_mode_in_ch_sel_we;
  logic raw_mode_in_data_valid_raw_mode_in_data_valid_0_qs;
  logic raw_mode_in_data_valid_raw_mode_in_data_valid_0_re;
  logic raw_mode_in_data_valid_raw_mode_in_data_valid_1_qs;
  logic raw_mode_in_data_valid_raw_mode_in_data_valid_1_re;
  logic raw_mode_in_data_valid_raw_mode_in_data_valid_2_qs;
  logic raw_mode_in_data_valid_raw_mode_in_data_valid_2_re;
  logic raw_mode_in_data_valid_raw_mode_in_data_valid_3_qs;
  logic raw_mode_in_data_valid_raw_mode_in_data_valid_3_re;
  logic raw_mode_in_data_valid_raw_mode_in_data_valid_4_qs;
  logic raw_mode_in_data_valid_raw_mode_in_data_valid_4_re;
  logic [15:0] raw_mode_in_data_qs;
  logic raw_mode_in_data_re;
  logic raw_mode_out_ch_mask_raw_mode_out_ch_mask_0_wd;
  logic raw_mode_out_ch_mask_raw_mode_out_ch_mask_0_we;
  logic raw_mode_out_ch_mask_raw_mode_out_ch_mask_1_wd;
  logic raw_mode_out_ch_mask_raw_mode_out_ch_mask_1_we;
  logic raw_mode_out_ch_mask_raw_mode_out_ch_mask_2_wd;
  logic raw_mode_out_ch_mask_raw_mode_out_ch_mask_2_we;
  logic raw_mode_out_ch_mask_raw_mode_out_ch_mask_3_wd;
  logic raw_mode_out_ch_mask_raw_mode_out_ch_mask_3_we;
  logic raw_mode_out_ch_mask_raw_mode_out_ch_mask_4_wd;
  logic raw_mode_out_ch_mask_raw_mode_out_ch_mask_4_we;
  logic [15:0] raw_mode_out_data_fifo_wd;
  logic raw_mode_out_data_fifo_we;
  logic raw_mode_out_data_fifo_ctrl_clear_wd;
  logic raw_mode_out_data_fifo_ctrl_clear_we;
  logic [2:0] raw_mode_out_data_fifo_ctrl_fill_state_qs;
  logic raw_mode_out_data_fifo_ctrl_fill_state_re;
  logic raw_mode_out_data_fifo_ctrl_is_full_qs;
  logic raw_mode_out_data_fifo_ctrl_is_full_re;
  logic raw_mode_out_en_qs;
  logic raw_mode_out_en_wd;
  logic raw_mode_out_en_we;
  logic flow_control_fifo_clear_wd;
  logic flow_control_fifo_clear_we;
  logic channel_alloc_tx_cfg_bypass_en_qs;
  logic channel_alloc_tx_cfg_bypass_en_wd;
  logic channel_alloc_tx_cfg_bypass_en_we;
  logic channel_alloc_tx_cfg_auto_flush_en_qs;
  logic channel_alloc_tx_cfg_auto_flush_en_wd;
  logic channel_alloc_tx_cfg_auto_flush_en_we;
  logic [7:0] channel_alloc_tx_cfg_auto_flush_count_qs;
  logic [7:0] channel_alloc_tx_cfg_auto_flush_count_wd;
  logic channel_alloc_tx_cfg_auto_flush_count_we;
  logic channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_0_qs;
  logic channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_0_wd;
  logic channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_0_we;
  logic channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_1_qs;
  logic channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_1_wd;
  logic channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_1_we;
  logic channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_2_qs;
  logic channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_2_wd;
  logic channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_2_we;
  logic channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_3_qs;
  logic channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_3_wd;
  logic channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_3_we;
  logic channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_4_qs;
  logic channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_4_wd;
  logic channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_4_we;
  logic channel_alloc_tx_ctrl_clear_wd;
  logic channel_alloc_tx_ctrl_clear_we;
  logic channel_alloc_tx_ctrl_flush_wd;
  logic channel_alloc_tx_ctrl_flush_we;
  logic channel_alloc_rx_cfg_bypass_en_qs;
  logic channel_alloc_rx_cfg_bypass_en_wd;
  logic channel_alloc_rx_cfg_bypass_en_we;
  logic channel_alloc_rx_cfg_auto_flush_en_qs;
  logic channel_alloc_rx_cfg_auto_flush_en_wd;
  logic channel_alloc_rx_cfg_auto_flush_en_we;
  logic [7:0] channel_alloc_rx_cfg_auto_flush_count_qs;
  logic [7:0] channel_alloc_rx_cfg_auto_flush_count_wd;
  logic channel_alloc_rx_cfg_auto_flush_count_we;
  logic channel_alloc_rx_cfg_sync_en_qs;
  logic channel_alloc_rx_cfg_sync_en_wd;
  logic channel_alloc_rx_cfg_sync_en_we;
  logic channel_alloc_rx_ctrl_wd;
  logic channel_alloc_rx_ctrl_we;
  logic channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_0_qs;
  logic channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_0_wd;
  logic channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_0_we;
  logic channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_1_qs;
  logic channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_1_wd;
  logic channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_1_we;
  logic channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_2_qs;
  logic channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_2_wd;
  logic channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_2_we;
  logic channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_3_qs;
  logic channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_3_wd;
  logic channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_3_we;
  logic channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_4_qs;
  logic channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_4_wd;
  logic channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_4_we;

  // Register instances
  // R[ctrl]: V(False)

  //   F[clk_ena]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_clk_ena (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_clk_ena_we),
    .wd     (ctrl_clk_ena_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.clk_ena.q ),

    // to register interface (read)
    .qs     (ctrl_clk_ena_qs)
  );


  //   F[reset_n]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_ctrl_reset_n (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_reset_n_we),
    .wd     (ctrl_reset_n_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.reset_n.q ),

    // to register interface (read)
    .qs     (ctrl_reset_n_qs)
  );


  //   F[axi_in_isolate]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_ctrl_axi_in_isolate (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_axi_in_isolate_we),
    .wd     (ctrl_axi_in_isolate_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.axi_in_isolate.q ),

    // to register interface (read)
    .qs     (ctrl_axi_in_isolate_qs)
  );


  //   F[axi_out_isolate]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_ctrl_axi_out_isolate (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_axi_out_isolate_we),
    .wd     (ctrl_axi_out_isolate_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.axi_out_isolate.q ),

    // to register interface (read)
    .qs     (ctrl_axi_out_isolate_qs)
  );


  // R[isolated]: V(True)

  //   F[axi_in]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolated_axi_in (
    .re     (isolated_axi_in_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated.axi_in.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_axi_in_qs)
  );


  //   F[axi_out]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolated_axi_out (
    .re     (isolated_axi_out_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated.axi_out.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_axi_out_qs)
  );



  // Subregister 0 of Multireg tx_phy_clk_div
  // R[tx_phy_clk_div_0]: V(False)

  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h8)
  ) u_tx_phy_clk_div_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tx_phy_clk_div_0_we),
    .wd     (tx_phy_clk_div_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tx_phy_clk_div[0].q ),

    // to register interface (read)
    .qs     (tx_phy_clk_div_0_qs)
  );

  // Subregister 1 of Multireg tx_phy_clk_div
  // R[tx_phy_clk_div_1]: V(False)

  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h8)
  ) u_tx_phy_clk_div_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tx_phy_clk_div_1_we),
    .wd     (tx_phy_clk_div_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tx_phy_clk_div[1].q ),

    // to register interface (read)
    .qs     (tx_phy_clk_div_1_qs)
  );

  // Subregister 2 of Multireg tx_phy_clk_div
  // R[tx_phy_clk_div_2]: V(False)

  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h8)
  ) u_tx_phy_clk_div_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tx_phy_clk_div_2_we),
    .wd     (tx_phy_clk_div_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tx_phy_clk_div[2].q ),

    // to register interface (read)
    .qs     (tx_phy_clk_div_2_qs)
  );

  // Subregister 3 of Multireg tx_phy_clk_div
  // R[tx_phy_clk_div_3]: V(False)

  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h8)
  ) u_tx_phy_clk_div_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tx_phy_clk_div_3_we),
    .wd     (tx_phy_clk_div_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tx_phy_clk_div[3].q ),

    // to register interface (read)
    .qs     (tx_phy_clk_div_3_qs)
  );

  // Subregister 4 of Multireg tx_phy_clk_div
  // R[tx_phy_clk_div_4]: V(False)

  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h8)
  ) u_tx_phy_clk_div_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tx_phy_clk_div_4_we),
    .wd     (tx_phy_clk_div_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tx_phy_clk_div[4].q ),

    // to register interface (read)
    .qs     (tx_phy_clk_div_4_qs)
  );



  // Subregister 0 of Multireg tx_phy_clk_start
  // R[tx_phy_clk_start_0]: V(False)

  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h2)
  ) u_tx_phy_clk_start_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tx_phy_clk_start_0_we),
    .wd     (tx_phy_clk_start_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tx_phy_clk_start[0].q ),

    // to register interface (read)
    .qs     (tx_phy_clk_start_0_qs)
  );

  // Subregister 1 of Multireg tx_phy_clk_start
  // R[tx_phy_clk_start_1]: V(False)

  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h2)
  ) u_tx_phy_clk_start_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tx_phy_clk_start_1_we),
    .wd     (tx_phy_clk_start_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tx_phy_clk_start[1].q ),

    // to register interface (read)
    .qs     (tx_phy_clk_start_1_qs)
  );

  // Subregister 2 of Multireg tx_phy_clk_start
  // R[tx_phy_clk_start_2]: V(False)

  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h2)
  ) u_tx_phy_clk_start_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tx_phy_clk_start_2_we),
    .wd     (tx_phy_clk_start_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tx_phy_clk_start[2].q ),

    // to register interface (read)
    .qs     (tx_phy_clk_start_2_qs)
  );

  // Subregister 3 of Multireg tx_phy_clk_start
  // R[tx_phy_clk_start_3]: V(False)

  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h2)
  ) u_tx_phy_clk_start_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tx_phy_clk_start_3_we),
    .wd     (tx_phy_clk_start_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tx_phy_clk_start[3].q ),

    // to register interface (read)
    .qs     (tx_phy_clk_start_3_qs)
  );

  // Subregister 4 of Multireg tx_phy_clk_start
  // R[tx_phy_clk_start_4]: V(False)

  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h2)
  ) u_tx_phy_clk_start_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tx_phy_clk_start_4_we),
    .wd     (tx_phy_clk_start_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tx_phy_clk_start[4].q ),

    // to register interface (read)
    .qs     (tx_phy_clk_start_4_qs)
  );



  // Subregister 0 of Multireg tx_phy_clk_end
  // R[tx_phy_clk_end_0]: V(False)

  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h6)
  ) u_tx_phy_clk_end_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tx_phy_clk_end_0_we),
    .wd     (tx_phy_clk_end_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tx_phy_clk_end[0].q ),

    // to register interface (read)
    .qs     (tx_phy_clk_end_0_qs)
  );

  // Subregister 1 of Multireg tx_phy_clk_end
  // R[tx_phy_clk_end_1]: V(False)

  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h6)
  ) u_tx_phy_clk_end_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tx_phy_clk_end_1_we),
    .wd     (tx_phy_clk_end_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tx_phy_clk_end[1].q ),

    // to register interface (read)
    .qs     (tx_phy_clk_end_1_qs)
  );

  // Subregister 2 of Multireg tx_phy_clk_end
  // R[tx_phy_clk_end_2]: V(False)

  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h6)
  ) u_tx_phy_clk_end_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tx_phy_clk_end_2_we),
    .wd     (tx_phy_clk_end_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tx_phy_clk_end[2].q ),

    // to register interface (read)
    .qs     (tx_phy_clk_end_2_qs)
  );

  // Subregister 3 of Multireg tx_phy_clk_end
  // R[tx_phy_clk_end_3]: V(False)

  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h6)
  ) u_tx_phy_clk_end_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tx_phy_clk_end_3_we),
    .wd     (tx_phy_clk_end_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tx_phy_clk_end[3].q ),

    // to register interface (read)
    .qs     (tx_phy_clk_end_3_qs)
  );

  // Subregister 4 of Multireg tx_phy_clk_end
  // R[tx_phy_clk_end_4]: V(False)

  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h6)
  ) u_tx_phy_clk_end_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tx_phy_clk_end_4_we),
    .wd     (tx_phy_clk_end_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tx_phy_clk_end[4].q ),

    // to register interface (read)
    .qs     (tx_phy_clk_end_4_qs)
  );


  // R[raw_mode_en]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_en_we),
    .wd     (raw_mode_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_en.q ),

    .qs     ()
  );


  // R[raw_mode_in_ch_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("WO"),
    .RESVAL  (3'h0)
  ) u_raw_mode_in_ch_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_in_ch_sel_we),
    .wd     (raw_mode_in_ch_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_in_ch_sel.q ),

    .qs     ()
  );



  // Subregister 0 of Multireg raw_mode_in_data_valid
  // R[raw_mode_in_data_valid]: V(True)

  // F[raw_mode_in_data_valid_0]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_raw_mode_in_data_valid_0 (
    .re     (raw_mode_in_data_valid_raw_mode_in_data_valid_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_raw_mode_in_data_valid_0_qs)
  );


  // F[raw_mode_in_data_valid_1]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_raw_mode_in_data_valid_1 (
    .re     (raw_mode_in_data_valid_raw_mode_in_data_valid_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_raw_mode_in_data_valid_1_qs)
  );


  // F[raw_mode_in_data_valid_2]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_raw_mode_in_data_valid_2 (
    .re     (raw_mode_in_data_valid_raw_mode_in_data_valid_2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[2].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_raw_mode_in_data_valid_2_qs)
  );


  // F[raw_mode_in_data_valid_3]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_raw_mode_in_data_valid_3 (
    .re     (raw_mode_in_data_valid_raw_mode_in_data_valid_3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[3].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_raw_mode_in_data_valid_3_qs)
  );


  // F[raw_mode_in_data_valid_4]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_raw_mode_in_data_valid_4 (
    .re     (raw_mode_in_data_valid_raw_mode_in_data_valid_4_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[4].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_raw_mode_in_data_valid_4_qs)
  );



  // R[raw_mode_in_data]: V(True)

  prim_subreg_ext #(
    .DW    (16)
  ) u_raw_mode_in_data (
    .re     (raw_mode_in_data_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data.d),
    .qre    (reg2hw.raw_mode_in_data.re),
    .qe     (),
    .q      (reg2hw.raw_mode_in_data.q ),
    .qs     (raw_mode_in_data_qs)
  );



  // Subregister 0 of Multireg raw_mode_out_ch_mask
  // R[raw_mode_out_ch_mask]: V(False)

  // F[raw_mode_out_ch_mask_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_raw_mode_out_ch_mask_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_raw_mode_out_ch_mask_0_we),
    .wd     (raw_mode_out_ch_mask_raw_mode_out_ch_mask_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[0].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_raw_mode_out_ch_mask_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_raw_mode_out_ch_mask_1_we),
    .wd     (raw_mode_out_ch_mask_raw_mode_out_ch_mask_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[1].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_raw_mode_out_ch_mask_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_raw_mode_out_ch_mask_2_we),
    .wd     (raw_mode_out_ch_mask_raw_mode_out_ch_mask_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[2].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_raw_mode_out_ch_mask_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_raw_mode_out_ch_mask_3_we),
    .wd     (raw_mode_out_ch_mask_raw_mode_out_ch_mask_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[3].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_raw_mode_out_ch_mask_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_raw_mode_out_ch_mask_4_we),
    .wd     (raw_mode_out_ch_mask_raw_mode_out_ch_mask_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[4].q ),

    .qs     ()
  );



  // R[raw_mode_out_data_fifo]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("WO"),
    .RESVAL  (16'h0)
  ) u_raw_mode_out_data_fifo (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_data_fifo_we),
    .wd     (raw_mode_out_data_fifo_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.raw_mode_out_data_fifo.qe),
    .q      (reg2hw.raw_mode_out_data_fifo.q ),

    .qs     ()
  );


  // R[raw_mode_out_data_fifo_ctrl]: V(True)

  //   F[clear]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_out_data_fifo_ctrl_clear (
    .re     (1'b0),
    .we     (raw_mode_out_data_fifo_ctrl_clear_we),
    .wd     (raw_mode_out_data_fifo_ctrl_clear_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.raw_mode_out_data_fifo_ctrl.clear.qe),
    .q      (reg2hw.raw_mode_out_data_fifo_ctrl.clear.q ),
    .qs     ()
  );


  //   F[fill_state]: 10:8
  prim_subreg_ext #(
    .DW    (3)
  ) u_raw_mode_out_data_fifo_ctrl_fill_state (
    .re     (raw_mode_out_data_fifo_ctrl_fill_state_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_out_data_fifo_ctrl.fill_state.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_out_data_fifo_ctrl_fill_state_qs)
  );


  //   F[is_full]: 31:31
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_out_data_fifo_ctrl_is_full (
    .re     (raw_mode_out_data_fifo_ctrl_is_full_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_out_data_fifo_ctrl.is_full.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_out_data_fifo_ctrl_is_full_qs)
  );


  // R[raw_mode_out_en]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_en_we),
    .wd     (raw_mode_out_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_en.q ),

    // to register interface (read)
    .qs     (raw_mode_out_en_qs)
  );


  // R[flow_control_fifo_clear]: V(True)

  prim_subreg_ext #(
    .DW    (1)
  ) u_flow_control_fifo_clear (
    .re     (1'b0),
    .we     (flow_control_fifo_clear_we),
    .wd     (flow_control_fifo_clear_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.flow_control_fifo_clear.qe),
    .q      (reg2hw.flow_control_fifo_clear.q ),
    .qs     ()
  );


  // R[channel_alloc_tx_cfg]: V(False)

  //   F[bypass_en]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_cfg_bypass_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_cfg_bypass_en_we),
    .wd     (channel_alloc_tx_cfg_bypass_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_cfg.bypass_en.q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_cfg_bypass_en_qs)
  );


  //   F[auto_flush_en]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_cfg_auto_flush_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_cfg_auto_flush_en_we),
    .wd     (channel_alloc_tx_cfg_auto_flush_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_cfg.auto_flush_en.q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_cfg_auto_flush_en_qs)
  );


  //   F[auto_flush_count]: 15:8
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h2)
  ) u_channel_alloc_tx_cfg_auto_flush_count (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_cfg_auto_flush_count_we),
    .wd     (channel_alloc_tx_cfg_auto_flush_count_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_cfg.auto_flush_count.q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_cfg_auto_flush_count_qs)
  );



  // Subregister 0 of Multireg channel_alloc_tx_ch_en
  // R[channel_alloc_tx_ch_en]: V(False)

  // F[channel_alloc_tx_ch_en_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_0_we),
    .wd     (channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[0].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_0_qs)
  );


  // F[channel_alloc_tx_ch_en_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_1_we),
    .wd     (channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[1].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_1_qs)
  );


  // F[channel_alloc_tx_ch_en_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_2_we),
    .wd     (channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[2].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_2_qs)
  );


  // F[channel_alloc_tx_ch_en_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_3_we),
    .wd     (channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[3].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_3_qs)
  );


  // F[channel_alloc_tx_ch_en_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_4_we),
    .wd     (channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[4].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_4_qs)
  );



  // R[channel_alloc_tx_ctrl]: V(True)

  //   F[clear]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_channel_alloc_tx_ctrl_clear (
    .re     (1'b0),
    .we     (channel_alloc_tx_ctrl_clear_we),
    .wd     (channel_alloc_tx_ctrl_clear_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.channel_alloc_tx_ctrl.clear.qe),
    .q      (reg2hw.channel_alloc_tx_ctrl.clear.q ),
    .qs     ()
  );


  //   F[flush]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_channel_alloc_tx_ctrl_flush (
    .re     (1'b0),
    .we     (channel_alloc_tx_ctrl_flush_we),
    .wd     (channel_alloc_tx_ctrl_flush_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.channel_alloc_tx_ctrl.flush.qe),
    .q      (reg2hw.channel_alloc_tx_ctrl.flush.q ),
    .qs     ()
  );


  // R[channel_alloc_rx_cfg]: V(False)

  //   F[bypass_en]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_cfg_bypass_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_cfg_bypass_en_we),
    .wd     (channel_alloc_rx_cfg_bypass_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_cfg.bypass_en.q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_cfg_bypass_en_qs)
  );


  //   F[auto_flush_en]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_cfg_auto_flush_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_cfg_auto_flush_en_we),
    .wd     (channel_alloc_rx_cfg_auto_flush_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_cfg.auto_flush_en.q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_cfg_auto_flush_en_qs)
  );


  //   F[auto_flush_count]: 15:8
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h2)
  ) u_channel_alloc_rx_cfg_auto_flush_count (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_cfg_auto_flush_count_we),
    .wd     (channel_alloc_rx_cfg_auto_flush_count_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_cfg.auto_flush_count.q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_cfg_auto_flush_count_qs)
  );


  //   F[sync_en]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_cfg_sync_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_cfg_sync_en_we),
    .wd     (channel_alloc_rx_cfg_sync_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_cfg.sync_en.q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_cfg_sync_en_qs)
  );


  // R[channel_alloc_rx_ctrl]: V(True)

  prim_subreg_ext #(
    .DW    (1)
  ) u_channel_alloc_rx_ctrl (
    .re     (1'b0),
    .we     (channel_alloc_rx_ctrl_we),
    .wd     (channel_alloc_rx_ctrl_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.channel_alloc_rx_ctrl.qe),
    .q      (reg2hw.channel_alloc_rx_ctrl.q ),
    .qs     ()
  );



  // Subregister 0 of Multireg channel_alloc_rx_ch_en
  // R[channel_alloc_rx_ch_en]: V(False)

  // F[channel_alloc_rx_ch_en_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_0_we),
    .wd     (channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[0].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_0_qs)
  );


  // F[channel_alloc_rx_ch_en_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_1_we),
    .wd     (channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[1].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_1_qs)
  );


  // F[channel_alloc_rx_ch_en_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_2_we),
    .wd     (channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[2].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_2_qs)
  );


  // F[channel_alloc_rx_ch_en_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_3_we),
    .wd     (channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[3].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_3_qs)
  );


  // F[channel_alloc_rx_ch_en_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_4_we),
    .wd     (channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[4].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_4_qs)
  );





  logic [31:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == SERIAL_LINK_CTRL_OFFSET);
    addr_hit[ 1] = (reg_addr == SERIAL_LINK_ISOLATED_OFFSET);
    addr_hit[ 2] = (reg_addr == SERIAL_LINK_TX_PHY_CLK_DIV_0_OFFSET);
    addr_hit[ 3] = (reg_addr == SERIAL_LINK_TX_PHY_CLK_DIV_1_OFFSET);
    addr_hit[ 4] = (reg_addr == SERIAL_LINK_TX_PHY_CLK_DIV_2_OFFSET);
    addr_hit[ 5] = (reg_addr == SERIAL_LINK_TX_PHY_CLK_DIV_3_OFFSET);
    addr_hit[ 6] = (reg_addr == SERIAL_LINK_TX_PHY_CLK_DIV_4_OFFSET);
    addr_hit[ 7] = (reg_addr == SERIAL_LINK_TX_PHY_CLK_START_0_OFFSET);
    addr_hit[ 8] = (reg_addr == SERIAL_LINK_TX_PHY_CLK_START_1_OFFSET);
    addr_hit[ 9] = (reg_addr == SERIAL_LINK_TX_PHY_CLK_START_2_OFFSET);
    addr_hit[10] = (reg_addr == SERIAL_LINK_TX_PHY_CLK_START_3_OFFSET);
    addr_hit[11] = (reg_addr == SERIAL_LINK_TX_PHY_CLK_START_4_OFFSET);
    addr_hit[12] = (reg_addr == SERIAL_LINK_TX_PHY_CLK_END_0_OFFSET);
    addr_hit[13] = (reg_addr == SERIAL_LINK_TX_PHY_CLK_END_1_OFFSET);
    addr_hit[14] = (reg_addr == SERIAL_LINK_TX_PHY_CLK_END_2_OFFSET);
    addr_hit[15] = (reg_addr == SERIAL_LINK_TX_PHY_CLK_END_3_OFFSET);
    addr_hit[16] = (reg_addr == SERIAL_LINK_TX_PHY_CLK_END_4_OFFSET);
    addr_hit[17] = (reg_addr == SERIAL_LINK_RAW_MODE_EN_OFFSET);
    addr_hit[18] = (reg_addr == SERIAL_LINK_RAW_MODE_IN_CH_SEL_OFFSET);
    addr_hit[19] = (reg_addr == SERIAL_LINK_RAW_MODE_IN_DATA_VALID_OFFSET);
    addr_hit[20] = (reg_addr == SERIAL_LINK_RAW_MODE_IN_DATA_OFFSET);
    addr_hit[21] = (reg_addr == SERIAL_LINK_RAW_MODE_OUT_CH_MASK_OFFSET);
    addr_hit[22] = (reg_addr == SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_OFFSET);
    addr_hit[23] = (reg_addr == SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_CTRL_OFFSET);
    addr_hit[24] = (reg_addr == SERIAL_LINK_RAW_MODE_OUT_EN_OFFSET);
    addr_hit[25] = (reg_addr == SERIAL_LINK_FLOW_CONTROL_FIFO_CLEAR_OFFSET);
    addr_hit[26] = (reg_addr == SERIAL_LINK_CHANNEL_ALLOC_TX_CFG_OFFSET);
    addr_hit[27] = (reg_addr == SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_OFFSET);
    addr_hit[28] = (reg_addr == SERIAL_LINK_CHANNEL_ALLOC_TX_CTRL_OFFSET);
    addr_hit[29] = (reg_addr == SERIAL_LINK_CHANNEL_ALLOC_RX_CFG_OFFSET);
    addr_hit[30] = (reg_addr == SERIAL_LINK_CHANNEL_ALLOC_RX_CTRL_OFFSET);
    addr_hit[31] = (reg_addr == SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(SERIAL_LINK_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(SERIAL_LINK_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(SERIAL_LINK_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(SERIAL_LINK_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(SERIAL_LINK_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(SERIAL_LINK_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(SERIAL_LINK_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(SERIAL_LINK_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(SERIAL_LINK_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(SERIAL_LINK_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(SERIAL_LINK_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(SERIAL_LINK_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(SERIAL_LINK_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(SERIAL_LINK_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(SERIAL_LINK_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(SERIAL_LINK_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(SERIAL_LINK_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(SERIAL_LINK_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(SERIAL_LINK_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(SERIAL_LINK_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(SERIAL_LINK_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(SERIAL_LINK_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(SERIAL_LINK_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(SERIAL_LINK_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(SERIAL_LINK_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(SERIAL_LINK_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(SERIAL_LINK_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(SERIAL_LINK_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(SERIAL_LINK_PERMIT[28] & ~reg_be))) |
               (addr_hit[29] & (|(SERIAL_LINK_PERMIT[29] & ~reg_be))) |
               (addr_hit[30] & (|(SERIAL_LINK_PERMIT[30] & ~reg_be))) |
               (addr_hit[31] & (|(SERIAL_LINK_PERMIT[31] & ~reg_be)))));
  end

  assign ctrl_clk_ena_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_clk_ena_wd = reg_wdata[0];

  assign ctrl_reset_n_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_reset_n_wd = reg_wdata[1];

  assign ctrl_axi_in_isolate_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_axi_in_isolate_wd = reg_wdata[8];

  assign ctrl_axi_out_isolate_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_axi_out_isolate_wd = reg_wdata[9];

  assign isolated_axi_in_re = addr_hit[1] & reg_re & !reg_error;

  assign isolated_axi_out_re = addr_hit[1] & reg_re & !reg_error;

  assign tx_phy_clk_div_0_we = addr_hit[2] & reg_we & !reg_error;
  assign tx_phy_clk_div_0_wd = reg_wdata[10:0];

  assign tx_phy_clk_div_1_we = addr_hit[3] & reg_we & !reg_error;
  assign tx_phy_clk_div_1_wd = reg_wdata[10:0];

  assign tx_phy_clk_div_2_we = addr_hit[4] & reg_we & !reg_error;
  assign tx_phy_clk_div_2_wd = reg_wdata[10:0];

  assign tx_phy_clk_div_3_we = addr_hit[5] & reg_we & !reg_error;
  assign tx_phy_clk_div_3_wd = reg_wdata[10:0];

  assign tx_phy_clk_div_4_we = addr_hit[6] & reg_we & !reg_error;
  assign tx_phy_clk_div_4_wd = reg_wdata[10:0];

  assign tx_phy_clk_start_0_we = addr_hit[7] & reg_we & !reg_error;
  assign tx_phy_clk_start_0_wd = reg_wdata[10:0];

  assign tx_phy_clk_start_1_we = addr_hit[8] & reg_we & !reg_error;
  assign tx_phy_clk_start_1_wd = reg_wdata[10:0];

  assign tx_phy_clk_start_2_we = addr_hit[9] & reg_we & !reg_error;
  assign tx_phy_clk_start_2_wd = reg_wdata[10:0];

  assign tx_phy_clk_start_3_we = addr_hit[10] & reg_we & !reg_error;
  assign tx_phy_clk_start_3_wd = reg_wdata[10:0];

  assign tx_phy_clk_start_4_we = addr_hit[11] & reg_we & !reg_error;
  assign tx_phy_clk_start_4_wd = reg_wdata[10:0];

  assign tx_phy_clk_end_0_we = addr_hit[12] & reg_we & !reg_error;
  assign tx_phy_clk_end_0_wd = reg_wdata[10:0];

  assign tx_phy_clk_end_1_we = addr_hit[13] & reg_we & !reg_error;
  assign tx_phy_clk_end_1_wd = reg_wdata[10:0];

  assign tx_phy_clk_end_2_we = addr_hit[14] & reg_we & !reg_error;
  assign tx_phy_clk_end_2_wd = reg_wdata[10:0];

  assign tx_phy_clk_end_3_we = addr_hit[15] & reg_we & !reg_error;
  assign tx_phy_clk_end_3_wd = reg_wdata[10:0];

  assign tx_phy_clk_end_4_we = addr_hit[16] & reg_we & !reg_error;
  assign tx_phy_clk_end_4_wd = reg_wdata[10:0];

  assign raw_mode_en_we = addr_hit[17] & reg_we & !reg_error;
  assign raw_mode_en_wd = reg_wdata[0];

  assign raw_mode_in_ch_sel_we = addr_hit[18] & reg_we & !reg_error;
  assign raw_mode_in_ch_sel_wd = reg_wdata[2:0];

  assign raw_mode_in_data_valid_raw_mode_in_data_valid_0_re = addr_hit[19] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_raw_mode_in_data_valid_1_re = addr_hit[19] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_raw_mode_in_data_valid_2_re = addr_hit[19] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_raw_mode_in_data_valid_3_re = addr_hit[19] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_raw_mode_in_data_valid_4_re = addr_hit[19] & reg_re & !reg_error;

  assign raw_mode_in_data_re = addr_hit[20] & reg_re & !reg_error;

  assign raw_mode_out_ch_mask_raw_mode_out_ch_mask_0_we = addr_hit[21] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_raw_mode_out_ch_mask_0_wd = reg_wdata[0];

  assign raw_mode_out_ch_mask_raw_mode_out_ch_mask_1_we = addr_hit[21] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_raw_mode_out_ch_mask_1_wd = reg_wdata[1];

  assign raw_mode_out_ch_mask_raw_mode_out_ch_mask_2_we = addr_hit[21] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_raw_mode_out_ch_mask_2_wd = reg_wdata[2];

  assign raw_mode_out_ch_mask_raw_mode_out_ch_mask_3_we = addr_hit[21] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_raw_mode_out_ch_mask_3_wd = reg_wdata[3];

  assign raw_mode_out_ch_mask_raw_mode_out_ch_mask_4_we = addr_hit[21] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_raw_mode_out_ch_mask_4_wd = reg_wdata[4];

  assign raw_mode_out_data_fifo_we = addr_hit[22] & reg_we & !reg_error;
  assign raw_mode_out_data_fifo_wd = reg_wdata[15:0];

  assign raw_mode_out_data_fifo_ctrl_clear_we = addr_hit[23] & reg_we & !reg_error;
  assign raw_mode_out_data_fifo_ctrl_clear_wd = reg_wdata[0];

  assign raw_mode_out_data_fifo_ctrl_fill_state_re = addr_hit[23] & reg_re & !reg_error;

  assign raw_mode_out_data_fifo_ctrl_is_full_re = addr_hit[23] & reg_re & !reg_error;

  assign raw_mode_out_en_we = addr_hit[24] & reg_we & !reg_error;
  assign raw_mode_out_en_wd = reg_wdata[0];

  assign flow_control_fifo_clear_we = addr_hit[25] & reg_we & !reg_error;
  assign flow_control_fifo_clear_wd = reg_wdata[0];

  assign channel_alloc_tx_cfg_bypass_en_we = addr_hit[26] & reg_we & !reg_error;
  assign channel_alloc_tx_cfg_bypass_en_wd = reg_wdata[0];

  assign channel_alloc_tx_cfg_auto_flush_en_we = addr_hit[26] & reg_we & !reg_error;
  assign channel_alloc_tx_cfg_auto_flush_en_wd = reg_wdata[1];

  assign channel_alloc_tx_cfg_auto_flush_count_we = addr_hit[26] & reg_we & !reg_error;
  assign channel_alloc_tx_cfg_auto_flush_count_wd = reg_wdata[15:8];

  assign channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_0_we = addr_hit[27] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_0_wd = reg_wdata[0];

  assign channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_1_we = addr_hit[27] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_1_wd = reg_wdata[1];

  assign channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_2_we = addr_hit[27] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_2_wd = reg_wdata[2];

  assign channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_3_we = addr_hit[27] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_3_wd = reg_wdata[3];

  assign channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_4_we = addr_hit[27] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_4_wd = reg_wdata[4];

  assign channel_alloc_tx_ctrl_clear_we = addr_hit[28] & reg_we & !reg_error;
  assign channel_alloc_tx_ctrl_clear_wd = reg_wdata[0];

  assign channel_alloc_tx_ctrl_flush_we = addr_hit[28] & reg_we & !reg_error;
  assign channel_alloc_tx_ctrl_flush_wd = reg_wdata[1];

  assign channel_alloc_rx_cfg_bypass_en_we = addr_hit[29] & reg_we & !reg_error;
  assign channel_alloc_rx_cfg_bypass_en_wd = reg_wdata[0];

  assign channel_alloc_rx_cfg_auto_flush_en_we = addr_hit[29] & reg_we & !reg_error;
  assign channel_alloc_rx_cfg_auto_flush_en_wd = reg_wdata[1];

  assign channel_alloc_rx_cfg_auto_flush_count_we = addr_hit[29] & reg_we & !reg_error;
  assign channel_alloc_rx_cfg_auto_flush_count_wd = reg_wdata[15:8];

  assign channel_alloc_rx_cfg_sync_en_we = addr_hit[29] & reg_we & !reg_error;
  assign channel_alloc_rx_cfg_sync_en_wd = reg_wdata[16];

  assign channel_alloc_rx_ctrl_we = addr_hit[30] & reg_we & !reg_error;
  assign channel_alloc_rx_ctrl_wd = reg_wdata[0];

  assign channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_0_we = addr_hit[31] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_0_wd = reg_wdata[0];

  assign channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_1_we = addr_hit[31] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_1_wd = reg_wdata[1];

  assign channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_2_we = addr_hit[31] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_2_wd = reg_wdata[2];

  assign channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_3_we = addr_hit[31] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_3_wd = reg_wdata[3];

  assign channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_4_we = addr_hit[31] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_4_wd = reg_wdata[4];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = ctrl_clk_ena_qs;
        reg_rdata_next[1] = ctrl_reset_n_qs;
        reg_rdata_next[8] = ctrl_axi_in_isolate_qs;
        reg_rdata_next[9] = ctrl_axi_out_isolate_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = isolated_axi_in_qs;
        reg_rdata_next[1] = isolated_axi_out_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[10:0] = tx_phy_clk_div_0_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[10:0] = tx_phy_clk_div_1_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[10:0] = tx_phy_clk_div_2_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[10:0] = tx_phy_clk_div_3_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[10:0] = tx_phy_clk_div_4_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[10:0] = tx_phy_clk_start_0_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[10:0] = tx_phy_clk_start_1_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[10:0] = tx_phy_clk_start_2_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[10:0] = tx_phy_clk_start_3_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[10:0] = tx_phy_clk_start_4_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[10:0] = tx_phy_clk_end_0_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[10:0] = tx_phy_clk_end_1_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[10:0] = tx_phy_clk_end_2_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[10:0] = tx_phy_clk_end_3_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[10:0] = tx_phy_clk_end_4_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[0] = '0;
      end

      addr_hit[18]: begin
        reg_rdata_next[2:0] = '0;
      end

      addr_hit[19]: begin
        reg_rdata_next[0] = raw_mode_in_data_valid_raw_mode_in_data_valid_0_qs;
        reg_rdata_next[1] = raw_mode_in_data_valid_raw_mode_in_data_valid_1_qs;
        reg_rdata_next[2] = raw_mode_in_data_valid_raw_mode_in_data_valid_2_qs;
        reg_rdata_next[3] = raw_mode_in_data_valid_raw_mode_in_data_valid_3_qs;
        reg_rdata_next[4] = raw_mode_in_data_valid_raw_mode_in_data_valid_4_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[15:0] = raw_mode_in_data_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
        reg_rdata_next[4] = '0;
      end

      addr_hit[22]: begin
        reg_rdata_next[15:0] = '0;
      end

      addr_hit[23]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[10:8] = raw_mode_out_data_fifo_ctrl_fill_state_qs;
        reg_rdata_next[31] = raw_mode_out_data_fifo_ctrl_is_full_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[0] = raw_mode_out_en_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[0] = '0;
      end

      addr_hit[26]: begin
        reg_rdata_next[0] = channel_alloc_tx_cfg_bypass_en_qs;
        reg_rdata_next[1] = channel_alloc_tx_cfg_auto_flush_en_qs;
        reg_rdata_next[15:8] = channel_alloc_tx_cfg_auto_flush_count_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[0] = channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_0_qs;
        reg_rdata_next[1] = channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_1_qs;
        reg_rdata_next[2] = channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_2_qs;
        reg_rdata_next[3] = channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_3_qs;
        reg_rdata_next[4] = channel_alloc_tx_ch_en_channel_alloc_tx_ch_en_4_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
      end

      addr_hit[29]: begin
        reg_rdata_next[0] = channel_alloc_rx_cfg_bypass_en_qs;
        reg_rdata_next[1] = channel_alloc_rx_cfg_auto_flush_en_qs;
        reg_rdata_next[15:8] = channel_alloc_rx_cfg_auto_flush_count_qs;
        reg_rdata_next[16] = channel_alloc_rx_cfg_sync_en_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[0] = '0;
      end

      addr_hit[31]: begin
        reg_rdata_next[0] = channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_0_qs;
        reg_rdata_next[1] = channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_1_qs;
        reg_rdata_next[2] = channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_2_qs;
        reg_rdata_next[3] = channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_3_qs;
        reg_rdata_next[4] = channel_alloc_rx_ch_en_channel_alloc_rx_ch_en_4_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module serial_link_reg_top_intf
#(
  parameter int AW = 8,
  localparam int DW = 64
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output serial_link_reg_pkg::serial_link_reg2hw_t reg2hw, // Write
  input  serial_link_reg_pkg::serial_link_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  serial_link_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


