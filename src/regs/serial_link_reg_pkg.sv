// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package serial_link_reg_pkg;

  // Param list
  parameter int NumChannels = 8;
  parameter int Log2NumChannels = 3;
  parameter int NumBits = 16;
  parameter int Log2MaxClkDiv = 10;
  parameter int FlushCounterWidth = 8;
  parameter int Log2RawModeTXFifoDepth = 3;

  // Address widths within the block
  parameter int BlockAw = 8;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
    } clk_ena;
    struct packed {
      logic        q;
    } reset_n;
    struct packed {
      logic        q;
    } axi_in_isolate;
    struct packed {
      logic        q;
    } axi_out_isolate;
  } serial_link_reg2hw_ctrl_reg_t;

  typedef struct packed {
    logic [10:0] q;
  } serial_link_reg2hw_tx_phy_clk_div_mreg_t;

  typedef struct packed {
    logic [10:0] q;
  } serial_link_reg2hw_tx_phy_clk_start_mreg_t;

  typedef struct packed {
    logic [10:0] q;
  } serial_link_reg2hw_tx_phy_clk_end_mreg_t;

  typedef struct packed {
    logic        q;
  } serial_link_reg2hw_raw_mode_en_reg_t;

  typedef struct packed {
    logic [2:0]  q;
  } serial_link_reg2hw_raw_mode_in_ch_sel_reg_t;

  typedef struct packed {
    logic [15:0] q;
    logic        re;
  } serial_link_reg2hw_raw_mode_in_data_reg_t;

  typedef struct packed {
    logic        q;
  } serial_link_reg2hw_raw_mode_out_ch_mask_mreg_t;

  typedef struct packed {
    logic [15:0] q;
    logic        qe;
  } serial_link_reg2hw_raw_mode_out_data_fifo_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } clear;
  } serial_link_reg2hw_raw_mode_out_data_fifo_ctrl_reg_t;

  typedef struct packed {
    logic        q;
  } serial_link_reg2hw_raw_mode_out_en_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } serial_link_reg2hw_flow_control_fifo_clear_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } bypass_en;
    struct packed {
      logic        q;
    } auto_flush_en;
    struct packed {
      logic [7:0]  q;
    } auto_flush_count;
  } serial_link_reg2hw_channel_alloc_tx_cfg_reg_t;

  typedef struct packed {
    logic        q;
  } serial_link_reg2hw_channel_alloc_tx_ch_en_mreg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } clear;
    struct packed {
      logic        q;
      logic        qe;
    } flush;
  } serial_link_reg2hw_channel_alloc_tx_ctrl_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } bypass_en;
    struct packed {
      logic        q;
    } auto_flush_en;
    struct packed {
      logic [7:0]  q;
    } auto_flush_count;
    struct packed {
      logic        q;
    } sync_en;
  } serial_link_reg2hw_channel_alloc_rx_cfg_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } serial_link_reg2hw_channel_alloc_rx_ctrl_reg_t;

  typedef struct packed {
    logic        q;
  } serial_link_reg2hw_channel_alloc_rx_ch_en_mreg_t;

  typedef struct packed {
    struct packed {
      logic        d;
    } axi_in;
    struct packed {
      logic        d;
    } axi_out;
  } serial_link_hw2reg_isolated_reg_t;

  typedef struct packed {
    logic        d;
  } serial_link_hw2reg_raw_mode_in_data_valid_mreg_t;

  typedef struct packed {
    logic [15:0] d;
  } serial_link_hw2reg_raw_mode_in_data_reg_t;

  typedef struct packed {
    struct packed {
      logic [2:0]  d;
    } fill_state;
    struct packed {
      logic        d;
    } is_full;
  } serial_link_hw2reg_raw_mode_out_data_fifo_ctrl_reg_t;

  // Register -> HW type
  typedef struct packed {
    serial_link_reg2hw_ctrl_reg_t ctrl; // [361:358]
    serial_link_reg2hw_tx_phy_clk_div_mreg_t [7:0] tx_phy_clk_div; // [357:270]
    serial_link_reg2hw_tx_phy_clk_start_mreg_t [7:0] tx_phy_clk_start; // [269:182]
    serial_link_reg2hw_tx_phy_clk_end_mreg_t [7:0] tx_phy_clk_end; // [181:94]
    serial_link_reg2hw_raw_mode_en_reg_t raw_mode_en; // [93:93]
    serial_link_reg2hw_raw_mode_in_ch_sel_reg_t raw_mode_in_ch_sel; // [92:90]
    serial_link_reg2hw_raw_mode_in_data_reg_t raw_mode_in_data; // [89:73]
    serial_link_reg2hw_raw_mode_out_ch_mask_mreg_t [7:0] raw_mode_out_ch_mask; // [72:65]
    serial_link_reg2hw_raw_mode_out_data_fifo_reg_t raw_mode_out_data_fifo; // [64:48]
    serial_link_reg2hw_raw_mode_out_data_fifo_ctrl_reg_t raw_mode_out_data_fifo_ctrl; // [47:46]
    serial_link_reg2hw_raw_mode_out_en_reg_t raw_mode_out_en; // [45:45]
    serial_link_reg2hw_flow_control_fifo_clear_reg_t flow_control_fifo_clear; // [44:43]
    serial_link_reg2hw_channel_alloc_tx_cfg_reg_t channel_alloc_tx_cfg; // [42:33]
    serial_link_reg2hw_channel_alloc_tx_ch_en_mreg_t [7:0] channel_alloc_tx_ch_en; // [32:25]
    serial_link_reg2hw_channel_alloc_tx_ctrl_reg_t channel_alloc_tx_ctrl; // [24:21]
    serial_link_reg2hw_channel_alloc_rx_cfg_reg_t channel_alloc_rx_cfg; // [20:10]
    serial_link_reg2hw_channel_alloc_rx_ctrl_reg_t channel_alloc_rx_ctrl; // [9:8]
    serial_link_reg2hw_channel_alloc_rx_ch_en_mreg_t [7:0] channel_alloc_rx_ch_en; // [7:0]
  } serial_link_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    serial_link_hw2reg_isolated_reg_t isolated; // [29:28]
    serial_link_hw2reg_raw_mode_in_data_valid_mreg_t [7:0] raw_mode_in_data_valid; // [27:20]
    serial_link_hw2reg_raw_mode_in_data_reg_t raw_mode_in_data; // [19:4]
    serial_link_hw2reg_raw_mode_out_data_fifo_ctrl_reg_t raw_mode_out_data_fifo_ctrl; // [3:0]
  } serial_link_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] SERIAL_LINK_CTRL_OFFSET = 8'h 0;
  parameter logic [BlockAw-1:0] SERIAL_LINK_ISOLATED_OFFSET = 8'h 4;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CLK_DIV_0_OFFSET = 8'h 8;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CLK_DIV_1_OFFSET = 8'h c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CLK_DIV_2_OFFSET = 8'h 10;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CLK_DIV_3_OFFSET = 8'h 14;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CLK_DIV_4_OFFSET = 8'h 18;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CLK_DIV_5_OFFSET = 8'h 1c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CLK_DIV_6_OFFSET = 8'h 20;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CLK_DIV_7_OFFSET = 8'h 24;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CLK_START_0_OFFSET = 8'h 28;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CLK_START_1_OFFSET = 8'h 2c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CLK_START_2_OFFSET = 8'h 30;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CLK_START_3_OFFSET = 8'h 34;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CLK_START_4_OFFSET = 8'h 38;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CLK_START_5_OFFSET = 8'h 3c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CLK_START_6_OFFSET = 8'h 40;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CLK_START_7_OFFSET = 8'h 44;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CLK_END_0_OFFSET = 8'h 48;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CLK_END_1_OFFSET = 8'h 4c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CLK_END_2_OFFSET = 8'h 50;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CLK_END_3_OFFSET = 8'h 54;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CLK_END_4_OFFSET = 8'h 58;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CLK_END_5_OFFSET = 8'h 5c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CLK_END_6_OFFSET = 8'h 60;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CLK_END_7_OFFSET = 8'h 64;
  parameter logic [BlockAw-1:0] SERIAL_LINK_RAW_MODE_EN_OFFSET = 8'h 68;
  parameter logic [BlockAw-1:0] SERIAL_LINK_RAW_MODE_IN_CH_SEL_OFFSET = 8'h 6c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_RAW_MODE_IN_DATA_VALID_OFFSET = 8'h 70;
  parameter logic [BlockAw-1:0] SERIAL_LINK_RAW_MODE_IN_DATA_OFFSET = 8'h 74;
  parameter logic [BlockAw-1:0] SERIAL_LINK_RAW_MODE_OUT_CH_MASK_OFFSET = 8'h 78;
  parameter logic [BlockAw-1:0] SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_OFFSET = 8'h 7c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_CTRL_OFFSET = 8'h 80;
  parameter logic [BlockAw-1:0] SERIAL_LINK_RAW_MODE_OUT_EN_OFFSET = 8'h 84;
  parameter logic [BlockAw-1:0] SERIAL_LINK_FLOW_CONTROL_FIFO_CLEAR_OFFSET = 8'h 88;
  parameter logic [BlockAw-1:0] SERIAL_LINK_CHANNEL_ALLOC_TX_CFG_OFFSET = 8'h 8c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_OFFSET = 8'h 90;
  parameter logic [BlockAw-1:0] SERIAL_LINK_CHANNEL_ALLOC_TX_CTRL_OFFSET = 8'h 94;
  parameter logic [BlockAw-1:0] SERIAL_LINK_CHANNEL_ALLOC_RX_CFG_OFFSET = 8'h 98;
  parameter logic [BlockAw-1:0] SERIAL_LINK_CHANNEL_ALLOC_RX_CTRL_OFFSET = 8'h 9c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_OFFSET = 8'h a0;

  // Reset values for hwext registers and their fields
  parameter logic [1:0] SERIAL_LINK_ISOLATED_RESVAL = 2'h 3;
  parameter logic [0:0] SERIAL_LINK_ISOLATED_AXI_IN_RESVAL = 1'h 1;
  parameter logic [0:0] SERIAL_LINK_ISOLATED_AXI_OUT_RESVAL = 1'h 1;
  parameter logic [7:0] SERIAL_LINK_RAW_MODE_IN_DATA_VALID_RESVAL = 8'h 0;
  parameter logic [15:0] SERIAL_LINK_RAW_MODE_IN_DATA_RESVAL = 16'h 0;
  parameter logic [31:0] SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_CTRL_RESVAL = 32'h 0;
  parameter logic [2:0] SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_CTRL_FILL_STATE_RESVAL = 3'h 0;
  parameter logic [0:0] SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_CTRL_IS_FULL_RESVAL = 1'h 0;
  parameter logic [0:0] SERIAL_LINK_FLOW_CONTROL_FIFO_CLEAR_RESVAL = 1'h 0;
  parameter logic [0:0] SERIAL_LINK_FLOW_CONTROL_FIFO_CLEAR_FLOW_CONTROL_FIFO_CLEAR_RESVAL = 1'h 0;
  parameter logic [1:0] SERIAL_LINK_CHANNEL_ALLOC_TX_CTRL_RESVAL = 2'h 0;
  parameter logic [0:0] SERIAL_LINK_CHANNEL_ALLOC_RX_CTRL_RESVAL = 1'h 0;

  // Register index
  typedef enum int {
    SERIAL_LINK_CTRL,
    SERIAL_LINK_ISOLATED,
    SERIAL_LINK_TX_PHY_CLK_DIV_0,
    SERIAL_LINK_TX_PHY_CLK_DIV_1,
    SERIAL_LINK_TX_PHY_CLK_DIV_2,
    SERIAL_LINK_TX_PHY_CLK_DIV_3,
    SERIAL_LINK_TX_PHY_CLK_DIV_4,
    SERIAL_LINK_TX_PHY_CLK_DIV_5,
    SERIAL_LINK_TX_PHY_CLK_DIV_6,
    SERIAL_LINK_TX_PHY_CLK_DIV_7,
    SERIAL_LINK_TX_PHY_CLK_START_0,
    SERIAL_LINK_TX_PHY_CLK_START_1,
    SERIAL_LINK_TX_PHY_CLK_START_2,
    SERIAL_LINK_TX_PHY_CLK_START_3,
    SERIAL_LINK_TX_PHY_CLK_START_4,
    SERIAL_LINK_TX_PHY_CLK_START_5,
    SERIAL_LINK_TX_PHY_CLK_START_6,
    SERIAL_LINK_TX_PHY_CLK_START_7,
    SERIAL_LINK_TX_PHY_CLK_END_0,
    SERIAL_LINK_TX_PHY_CLK_END_1,
    SERIAL_LINK_TX_PHY_CLK_END_2,
    SERIAL_LINK_TX_PHY_CLK_END_3,
    SERIAL_LINK_TX_PHY_CLK_END_4,
    SERIAL_LINK_TX_PHY_CLK_END_5,
    SERIAL_LINK_TX_PHY_CLK_END_6,
    SERIAL_LINK_TX_PHY_CLK_END_7,
    SERIAL_LINK_RAW_MODE_EN,
    SERIAL_LINK_RAW_MODE_IN_CH_SEL,
    SERIAL_LINK_RAW_MODE_IN_DATA_VALID,
    SERIAL_LINK_RAW_MODE_IN_DATA,
    SERIAL_LINK_RAW_MODE_OUT_CH_MASK,
    SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO,
    SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_CTRL,
    SERIAL_LINK_RAW_MODE_OUT_EN,
    SERIAL_LINK_FLOW_CONTROL_FIFO_CLEAR,
    SERIAL_LINK_CHANNEL_ALLOC_TX_CFG,
    SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN,
    SERIAL_LINK_CHANNEL_ALLOC_TX_CTRL,
    SERIAL_LINK_CHANNEL_ALLOC_RX_CFG,
    SERIAL_LINK_CHANNEL_ALLOC_RX_CTRL,
    SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN
  } serial_link_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] SERIAL_LINK_PERMIT [41] = '{
    4'b 0011, // index[ 0] SERIAL_LINK_CTRL
    4'b 0001, // index[ 1] SERIAL_LINK_ISOLATED
    4'b 0011, // index[ 2] SERIAL_LINK_TX_PHY_CLK_DIV_0
    4'b 0011, // index[ 3] SERIAL_LINK_TX_PHY_CLK_DIV_1
    4'b 0011, // index[ 4] SERIAL_LINK_TX_PHY_CLK_DIV_2
    4'b 0011, // index[ 5] SERIAL_LINK_TX_PHY_CLK_DIV_3
    4'b 0011, // index[ 6] SERIAL_LINK_TX_PHY_CLK_DIV_4
    4'b 0011, // index[ 7] SERIAL_LINK_TX_PHY_CLK_DIV_5
    4'b 0011, // index[ 8] SERIAL_LINK_TX_PHY_CLK_DIV_6
    4'b 0011, // index[ 9] SERIAL_LINK_TX_PHY_CLK_DIV_7
    4'b 0011, // index[10] SERIAL_LINK_TX_PHY_CLK_START_0
    4'b 0011, // index[11] SERIAL_LINK_TX_PHY_CLK_START_1
    4'b 0011, // index[12] SERIAL_LINK_TX_PHY_CLK_START_2
    4'b 0011, // index[13] SERIAL_LINK_TX_PHY_CLK_START_3
    4'b 0011, // index[14] SERIAL_LINK_TX_PHY_CLK_START_4
    4'b 0011, // index[15] SERIAL_LINK_TX_PHY_CLK_START_5
    4'b 0011, // index[16] SERIAL_LINK_TX_PHY_CLK_START_6
    4'b 0011, // index[17] SERIAL_LINK_TX_PHY_CLK_START_7
    4'b 0011, // index[18] SERIAL_LINK_TX_PHY_CLK_END_0
    4'b 0011, // index[19] SERIAL_LINK_TX_PHY_CLK_END_1
    4'b 0011, // index[20] SERIAL_LINK_TX_PHY_CLK_END_2
    4'b 0011, // index[21] SERIAL_LINK_TX_PHY_CLK_END_3
    4'b 0011, // index[22] SERIAL_LINK_TX_PHY_CLK_END_4
    4'b 0011, // index[23] SERIAL_LINK_TX_PHY_CLK_END_5
    4'b 0011, // index[24] SERIAL_LINK_TX_PHY_CLK_END_6
    4'b 0011, // index[25] SERIAL_LINK_TX_PHY_CLK_END_7
    4'b 0001, // index[26] SERIAL_LINK_RAW_MODE_EN
    4'b 0001, // index[27] SERIAL_LINK_RAW_MODE_IN_CH_SEL
    4'b 0001, // index[28] SERIAL_LINK_RAW_MODE_IN_DATA_VALID
    4'b 0011, // index[29] SERIAL_LINK_RAW_MODE_IN_DATA
    4'b 0001, // index[30] SERIAL_LINK_RAW_MODE_OUT_CH_MASK
    4'b 0011, // index[31] SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO
    4'b 1111, // index[32] SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_CTRL
    4'b 0001, // index[33] SERIAL_LINK_RAW_MODE_OUT_EN
    4'b 0001, // index[34] SERIAL_LINK_FLOW_CONTROL_FIFO_CLEAR
    4'b 0011, // index[35] SERIAL_LINK_CHANNEL_ALLOC_TX_CFG
    4'b 0001, // index[36] SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN
    4'b 0001, // index[37] SERIAL_LINK_CHANNEL_ALLOC_TX_CTRL
    4'b 0111, // index[38] SERIAL_LINK_CHANNEL_ALLOC_RX_CFG
    4'b 0001, // index[39] SERIAL_LINK_CHANNEL_ALLOC_RX_CTRL
    4'b 0001  // index[40] SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN
  };

endpackage

